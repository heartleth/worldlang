{
    "name": "nodejs",
    "ext": "js",
    "h_ext": "js",

    "line_end": ";",

    "bracket": {
        "block_open": "{",
        "block_close": "}",

        "value_open": "(",
        "value_close": ")",

        "dotarray_open": "[",
        "dotarray_close": "]",

        "list_open": "[",
        "list_close": "]"
    },
    "operator": {
        "commas" : ",",
        
        "pointer" : "[{{exp}}]",
        "de_pointer" : "{{exp}}[0]",

        "await" : "(await {{exp}})",
        "async" : "(async {{exp}})",

        "tenary": "(({{condition}})?({{l}}):({{r}}))",
        "assign" : "({{l}} = {{r}})",

        "plus" : "({{l}} + {{r}})",
        "minus" : "({{l}} - {{r}})",
        
        "bitor" : "({{l}} | {{r}})",
        "or" : "({{l}} || {{r}})",
        "bitand" : "({{l}} & {{r}})",
        "and" : "({{l}} && {{r}})",

        "eq" : "({{l}} == {{r}})",
        "neq" : "({{l}} != {{r}})",
        
        "pair" : "{ {{l}} : {{r}} }",
        
        "property" : "{{object}}.{{name}}",
        "context" : "{{context}}.{{member}}",
        "index" : "{{exp}}[{{at}}]",

        "else" : "({{l}} {{operator}} {{r}})"
    },
    "blocks": {
        "if": "if ({{exp}}) { {{block}} }",
        "else_if": "else if ({{exp}}) { {{block}} }",
        "else": "else { {{block}} }",

        "while": "while ({{exp}}) { {{block}} }",
        "repeat": "for (let {{var}} = 0; {{var}}<{{time}}; {{var}}++) { {{block}} }",
        "foreach": "for ({{var}} of {{collection}}) { {{block}} }"
    },
    "calls": {
        "call": "{{method}}({{args}})",
        "call_wrapped": "{{method}}{{args}}",
        "method_call" : "{{object}}.{{call}}"
    },
    "types": {
        "deduce_type": "let",
        "constant": "",
        "void_type": "",
        "integer": "",

        "_constant": "const",
        "_void_type": "void",
        "_integer": "Number"
    },

    "lambda_blocks": "[&]({{args}}){{ {block} }}",
    "to_lambdas": "[&](auto...pp){return ({{function}}({{args}}pp...));}",
    "lambdas": "({{args}}){ return( {{exp}} ); }",

    "returns": "return ({{exp}});",

    "_namespaces": "namespace {{name}} { {{block}} }",

    "iter_vars": "let {{name}}",
    "arg_vars": "{{name}}",

    "header_guards": "{{contents}}",

    "funcs": {
        "functions": "function {{name}}({{args}}) { {{block}} }",
        "constructor": "constructor({{args}}){ {{block}} }",
        "entry": "(()=>{ {{block}} })();"
    },
    "assigns": {
        "reference": {
            "const": "const {{name}} = {{ref}}",
            "make": "let {{name}} = {{ref}}",
            "let": "let {{name}} = {{ref}}"
        },
        "copy": {
            "const": "const {{name}} = {{copy}}",
            "make": "let {{name}} = new {{type}}({{copy}})",
            "let": "let {{name}} = {{copy}}"
        },
        "construct": {
            "const": "const {{type}} {{name}}({{args}})",
            "make": "let {{name}} = new {{type}}({{args}})",
            "let": "let {{name}} = new {{type}}({{args}})"
        }
    },
    "imports": {
        "import": "import * from '{{path}}';\n",
        "stdlib": "import{print, println}from'./worldlib';\n",
        "library": "const {{path}} = require('{{path}}');\n",

        "targetstdlibpath": "worldlib.js",
        "stdlibpath": " WRITE WHERE YOUR STANDARD LIBRARY IS. "
    },
    "classes": {
        "inherit": "class {{name}} extends {{super}} { {{block}} }",
        "class": "class {{name}}{ {{block}} }"
    },
    "access": {
        "protected": "",
        "private": "",
        "public": "",

        "_protected": "protected",
        "_private": "private",
        "_public": "public"
    }
}